

------------------------------------------------------------------------------
Date: Thu, 19 May 2005 09:34:46 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Reference for initial JScheme interpreter technique of 2000

Hi Harold,

Peter Norvig wrote the core for the present JScheme interpreter and I 
believe that it
was modeled on one of the Scheme interpreters in one of his AI books,
but I'm not sure. I'll cc this email to Peter. If he has time and 
remembers,
he might be able to provide a reference.....

On May 19, 2005, at 9:08 AM, Harold Carr wrote:

>
> Dear Dr. Hickey,
>
> My name is Harold Carr.  We exchanged mail a couple of times back in
> early 2000.  I asked some questions regarding the then-named Silk
> implementation and I supplied a couple of bug fixes to arithmetic.
We changed the name due to a trademark dispute, so its better to use
JScheme to avoid confusion, or JScheme (formerly known as Silk).
>
> I'm finishing a paper for the International Lisp Conference and was
> wondering if you could help me:
>
> QUESTION: Do you know of any references to the Engine technique used
> by Silk in 2000?

Let me look around and find some references. The basic idea behind the
interpreter is that it does some preprocessing when an expression is 
read
(the "analyze" phase) and then executes the code using a syntax-directed
interpreter where tail calls are interpreted as "continue"s in the main 
while
loop of the interpreter. This approach makes it difficult to directly 
implement
full call/cc and we in fact did not even try (except in a meta-level 
interpreter).

>
> I realize Jscheme uses the bean scripting framework now but did use an
> Engine to achieve tail-recursion at one time.  Does Silk's previous
> Engine have any history with Friedman/Haynes "Engines Build Process
> Abstractions" papers?
Peter Norvig wrote the initial version of the current Scheme 
interpreter and
then Ken and I extended it to include Java dot notation and access to 
all of the
Java runtime (exception handling, threads, etc.). Tragically, Ken died 
last January,
so Peter and I are the only ones with knowledge of the history of 
JScheme.

>
> I'm citing papers by you and Ken Anderson regarding Jscheme but would
> like to be able to cite specific references to Silk's previous Engine.
Understood ...

Best wishes,
---Tim---

P.S. I'd love to see your paper when its complete!

>
> Any help you can give me is very much appreciated.
>
> Regards,
> Harold Carr
>
> http://haroldcarr.net/
>
>

------------------------------------------------------------------------------

Date: Thu, 19 May 2005 12:53:48 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Re: Reference for initial JScheme interpreter technique of 2000
Sender: tjhickey@brandeis.edu
To: Harold.Carr@Sun.COM
Cc: peter@norvig.com

Hi Harold,

Life is pretty busy, but I think I could find time to fit in a quick 
read of
your manuscript.  With luck I'll have some comments that you
might find useful! (I have 30 final papers to grade by next Wednesday
so I'm really in the "critical reading" mode and would enjoy having
something more technical to read ....)


On May 19, 2005, at 11:36 AM, harold carr wrote:

> Hell Tim (and Peter),
>
> Thanks for your quick response
>
>> Peter Norvig wrote the core for the present JScheme interpreter and I
>> believe that it
>> was modeled on one of the Scheme interpreters in one of his AI books,
>
> I just checked PAIP and didn't see anything obvious, unless one views
> the Engine as a form of continutation.  Also, I do not recall Engine
> being in Peter's initial implemenation.  I seem to recall it appearing
> when you and Ken started working on Silk.
Ah yes.
Now I remember.
The jscheme.bsf.Engine class implements
an interface around a jscheme.JScheme object,
which in turn is a wrapper around a private jsint.Evaluator object.


We made these abstractions when introducing modules and multiple
independent JScheme intepreters. This was actually done by two
contributors: Derek Upham and Topy Allsopp; Ken and I liked what they
had proposed and after some revising incorporated it into the main
branch of the code.

>
>>> QUESTION: Do you know of any references to the Engine technique used
>>> by Silk in 2000?
>
>> Let me look around and find some references. The basic idea behind the
>> interpreter is that it does some preprocessing when an expression is
>> read
>> (the "analyze" phase) and then executes the code using a 
>> syntax-directed
>> interpreter where tail calls are interpreted as "continue"s in the 
>> main
>> while
>> loop of the interpreter.
>
> Looking at the Silk implementation from 2000 I see the compile to Code
> phase during read time.  Then the Engine-based runtime where the Engine
> construct enables tail calls as "continues" in the Engine's loop.  That
> Engine technique is precisely what I need some history and references 
> for.
I think it is in the Lisp in Small Pieces book, I don't have it at 
home, I'll check
this afternoon at work...

>
>> Tragically, Ken died
>> last January,
>
> I lost my best friend of 30 years recently.  My life has changed.  My
> condolences.

Life is fragile and precious!

Best wishes,
---Tim---


------------------------------------------------------------------------------

Date: Fri, 20 May 2005 10:49:01 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Re: Reference for initial JScheme interpreter technique of 2000
Sender: tjhickey@brandeis.edu
To: Harold.Carr@Sun.COM

Hi Harold,

I just took a quick tour of your paper and it is *very* nice!

Ken and I always felt that JScheme sat between Java and Scheme
and were more interested in keeping it close to Java than Scheme.
Also, I fully agree with your design principle to get maximum leverage
out of Java, we came to that philosophy somewhat later however and
hence JScheme is better viewed as a dialect of Scheme than "Java
in Lisp syntax"

Ken experimented with a way of defining Java classes in Scheme
(its called dclass in the Scheme CVS distribution), but it hasn't been
put on as strong a formal foundation as your approach. I look forward
to reading about your approach in detail.

I hope to get some detailed line by line comments back to you
in the next few days. Thanks for letting me take part in your  
pre-submission
review.

Best wishes,
---Tim---


On May 20, 2005, at 10:18 AM, harold carr wrote:

> Hello Tim,
>
> Thanks for saying you'll look at my paper.  I finished it last night at
> midnight.  I'm off to the airport now for a 4 day celebration of my
> wife's son's graduation from UC Berkeley.  I'm taking my laptop but not
> sure if I'll have connectivity until I return.
>
> I've enclosed both the PDF and Latex files.  My friends like to add
> comments directly to the Latex file.
>
> One thing:  I'm going to try the optimization on reflection failure
> mentioned in the paper to hopefully get better RI failure performance
> numbers before submitting the final paper.
>
> THanks!
> H


------------------------------------------------------------------------------


Date: Tue, 24 May 2005 13:47:12 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Re: Reference for initial JScheme interpreter technique of 2000
Sender: tjhickey@brandeis.edu
To: Harold.Carr@Sun.COM

Hi Harold,

I'll try to get you something by late this afternoon (in about 3 
hours...)
I'm just now grading my final few papers ...

On May 24, 2005, at 1:13 PM, harold carr wrote:
> Hello Tim,
> I returned last night from my wife's son's graduation from UC Berkeley.
>  The submission deadline is tomorrow.  I'd love to hear your comments.
> Thanks for the comments on your quick tour of the paper.  I did see 
> them
> just before turning the computers off.  Nice way to start a vaction.
You've done a great job formulating design principles for a new language
(Java in Lisp notation, fully leveraging Java, ...)
and building the initial implementation.

Any comments I provide (later today) will be minor and technical,
I'm sure.

Best,
---Tim---


>
> Regards,
> Harold
>

------------------------------------------------------------------------------

Date: Tue, 24 May 2005 17:22:42 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Re: Reference for initial JScheme interpreter technique of 2000
Sender: tjhickey@brandeis.edu
To: Harold.Carr@Sun.COM

Hi Harold,

I've only been able to read the first three pages
(one of the last papers I graded had massive plagiarism
which pushed my schedule way back ...)

I'll try to finish it tonight after I take the dog to obedience
class with my daughter and then read a story to my son
and get him to bed!

A few comments on the first page.
Section 2.1 .... numerous small design [decisions]
   reads better to me

2.1.2
   I vote for comment following Java syntax
   it fits with your design decision

2.1.2.3
   I vote for Java syntax for operators

2.1.2.2
Java allows unicode characters, llava ought to have a way to
express those as well..

Table 3.
I would love to see how you handle the this(...) and super(....)
calls inside llava constructors ...

I'll try to finish the paper later tonight and send along some comments
as they might be helpful either now or when you submit the final
revision for the paper in a few months...

Best wishes,
---Tim---


On May 24, 2005, at 1:13 PM, harold carr wrote:

> Hello Tim,
>
> I returned last night from my wife's son's graduation from UC Berkeley.
Congratulations on that!!

>  The submission deadline is tomorrow.  I'd love to hear your comments.
> Thanks for the comments on your quick tour of the paper.  I did see 
> them
> just before turning the computers off.  Nice way to start a vaction.
>
> Regards,
> Harold
>

------------------------------------------------------------------------------

Date: Tue, 24 May 2005 20:23:58 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Re: Reference for initial JScheme interpreter technique of 2000
Sender: tjhickey@brandeis.edu
To: Harold.Carr@Sun.COM

Hi Harold,

On May 24, 2005, at 5:35 PM, harold carr wrote:
> Hello Tim,
>> I'll try to finish the paper later tonight and send along some 
>> comments
>> as they might be helpful either now or when you submit the final
>> revision for the paper in a few months...
>
> Please note: this paper has already been accepted at the Internation
> Lisp Conference 2005.
Super!

By the way, I really like the name llava (pronounced yava, as in Java 
in Spanish???)


> The final version is due tomorrow (Wednesday May 25).
OK

>
> Thanks for your initial comments - I'll incorporate them this evening.
>

Here are a few more comments:

2.1.3 ... llava does not support modifiers OR types in ....

2.1.4 .... [[ I would vote for the non-parenthesis case as
                 parentheses don't really contribute much to the syntax
                 in that case ... ]]
  3.0.9.2
    llava GENERATES byte code ...

    .... llava removes method bodies and replaces
    THEM   with code ...

5
   Much IMPLEMENTATION WORK remains. The current imple-...

Overall comments ...
Great paper and very interesting ideas.
Now the hard part is seeing whether you can get any Java programmers
converted!  Thanks for letting me comment on a pre-publication version!

It will probably take me a week or so to digest the bigger ideas
in your paper (modules, RI system, etc...) I want to look into
combining JScheme and llava. Also, I have a student who just
completed a senior honors thesis on compiling JScheme to Java.
He's got some really nice ideas for optimization (with static unboxing)
that provides considerable speedups (50x for some JScheme programs ...)


Cheers,
---Tim---


P.S.

Another idea, which is somehow a reflection of llava, is to implement
Lisp in Java syntax, i.e. find a simple extensions of Java that provides
closures and macros. I think Matthew Flatt in Utah might be working on
something like that ....


------------------------------------------------------------------------------

Date: Tue, 24 May 2005 23:38:33 -0400
From: Timothy J Hickey <tjhickey@brandeis.edu>
Subject: Finally -- Reference for initial JScheme interpreter technique of 2000
Sender: tjhickey@brandeis.edu
To: Harold.Carr@Sun.COM

Hi Harold,

I had two more last minute comments:

1) In section 1.2 you mention JScheme's ability to access a static 
field as a variable reference
as an advantage, but its one of the few things I wish I had done 
differently! Your approach
is much cleaner and in my mind more natural, but at the time we thought 
it would make
code easier for Java programmers....

2) Also, you might want a more academic citation for JScheme.
Below I list 3 citations, with links to the papers, and descriptions of 
how they
relate to your paper ...

A) Probably the most respectable one would
be the paper "Reflecting Java Through Scheme" in Reflect99.
This one describes the Reflection mechanism used at the time, which was 
similar
to your RI..
> K. Anderson, T. Hickey, "Reflecting Java Through Scheme",
> Proceedings of the Second International Conference on Metalevel 
> Architectures and Reflection (Reflection'99), Saint-Malo, France, July 
> 19-21,1999;
> Springer-Verlag Lecture Notes in Computer Science, vol. 1616, pp. 
> 154-174, 1999.
You can access an online copy of the paper at
      http://www.cs.brandeis.edu/~tim/Papers/Reflection99/paper.ps
but you shouldn't put that link in the paper as I no longer own the 
copyright to the paper.

  B) Another possible citation  (which describes the javadot notation)
>  "Silk: A Playful Combination of Scheme and Java"
> by Ken Anderson, Timothy J. Hickey, and Peter Norvig
> Proceedings of the Workshop on Scheme and Function Programming , pp 
> 13-22
> Rice University, CS Dept. Technical Report 00-368, September 2000.
which you can access at
      http://www.cs.brandeis.edu/~tim/Papers/Reflection99/silk2000.pdf

C) Finally, the LUGM98 paper has the description of the Engine approach:
> T. Hickey, P. Norvig, K. Anderson, "LISP - a Language for Internet 
> Scripting and Programming",
> in LUGM'98: The 40th Anniversary of LISP: Lisp in the Mainstream, Nov. 
> 1998, Berkeley, CA.
which you access at
      http://www.cs.brandeis.edu/~tim/Papers/Reflection99/lugm.ps
and section 6.2 describes the "Engine" approach to handling tail 
recursion


Best wishes,
---Tim---


On May 24, 2005, at 5:35 PM, harold carr wrote:

> Hello Tim,
>
>> I'll try to finish the paper later tonight and send along some 
>> comments
>> as they might be helpful either now or when you submit the final
>> revision for the paper in a few months...
>
> Please note: this paper has already been accepted at the Internation
> Lisp Conference 2005.  The final version is due tomorrow (Wednesday 
> May 25).
>
> Thanks for your initial comments - I'll incorporate them this evening.
>
> H

;;; End of file.
